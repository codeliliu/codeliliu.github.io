<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈谈消息中间件</title>
      <link href="/2019/03/23/%E8%B0%88%E8%B0%88%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2019/03/23/%E8%B0%88%E8%B0%88%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-使用消息队列的理由-使用场景-优点，缺点"><a href="#1-使用消息队列的理由-使用场景-优点，缺点" class="headerlink" title="1.使用消息队列的理由(使用场景,优点，缺点)"></a>1.使用消息队列的理由(使用场景,优点，缺点)</h2><h4 id="使用场景与优点"><a href="#使用场景与优点" class="headerlink" title="使用场景与优点"></a>使用场景与优点</h4><h5 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h5><pre><code>​    系统之间通信采用消息中间件，避免了直接使用接口调用，各个模块之间的功能调用借助于消息中间件进行通讯，模块之间的功能调用可以很方便的绑定与解除，业务及系统服务的耦合度降低，易于系统调整与扩展。</code></pre><h5 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h5><pre><code>​    在许多场景下，用户请求的模块(或其他)的功能实现的同时要完成其他几个模块的功能调用，但用户请求的所要求的返回结果并不依赖于其他几个模块的返回结果，往往这时候被调用的模块任务执行往往是耗时的，多个模块顺序调用的情况下时间累加将会比较耗时，给用户的使用体验会很不友好。这种情况下，用户请求的模块完成自身业务后向其他模块发送消息，快速返回结果，其他模块异步执行，用户体验良好。</code></pre><h5 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h5><pre><code>​    系统访问高峰时，每秒并发数量剧增，系统处理能力不足(请求是并发的，若每个请求对应的业务也并发执行，如耗时操作，并发访问数据库等，系统无法承受)，这时若采用消息队列，则可以在收到大量的并发请求后发送消息到消息队列，而消息消费者(其他功能模块)按固定的可以承受的压力消费队列消息，在消费消息后完成业务处理。这样一来，就可以将系统访问高峰时的压力通过消息队列分摊到其他时间段，及削减了峰值压力，也提高了闲时系统利用率。</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h5 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h5><pre><code>​    系统引入的外部依赖越多，越容易挂掉，本来只需调用接口即可，只要各个模块及dubbo通信不出问题即可，现在要同时保证消息中间件不出问题。</code></pre><h5 id="系统复杂性提高"><a href="#系统复杂性提高" class="headerlink" title="系统复杂性提高"></a>系统复杂性提高</h5><pre><code>​    引入MQ，意味着必须处理消息生产者、‘消息中间件、消息消费者任意一端可能引起的消息丢失，消息重复发送，大量消息积压，如何保证消息的顺序发送等各种复杂问题。</code></pre><h2 id="2-消息中间件如何选型"><a href="#2-消息中间件如何选型" class="headerlink" title="2.消息中间件如何选型"></a>2.消息中间件如何选型</h2><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">ActiveMQ</th><th style="text-align:center">RabbitMQ</th><th style="text-align:center">RocketMQ</th><th style="text-align:center">Kafka</th></tr></thead><tbody><tr><td style="text-align:center">单机吞吐量</td><td style="text-align:center">万级，比Rocket和Kafka低一个数量级</td><td style="text-align:center">万级，比Rocket和Kafka低一个数量级</td><td style="text-align:center">10万级</td><td style="text-align:center">10万级，这是Kafka最大的优点。一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td style="text-align:center">topic数量对吞吐量的影响</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">topic可以达到几百、几千的级别，吞吐量会有小幅度下降</td><td style="text-align:center">topic从几十个到几百个的时候，吞吐量会大量下降</td></tr><tr><td style="text-align:center">时效性</td><td style="text-align:center">ms级</td><td style="text-align:center">微秒级，这是rabbirmq的一大特点，延迟最低</td><td style="text-align:center">ms级</td><td style="text-align:center">ms级别</td></tr><tr><td style="text-align:center">可用性</td><td style="text-align:center">高，基于主从架构实现高可用性</td><td style="text-align:center">高，基于主从架构实现高可用性</td><td style="text-align:center">非常高，分布式架构</td><td style="text-align:center">非常高，分布式架构，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td style="text-align:center">消息可靠性</td><td style="text-align:center">有较低的概率丢失数据</td><td style="text-align:center">基本不会丢失</td><td style="text-align:center">经过参数优化配置，可以做到0丢失</td><td style="text-align:center">经过参数优化配置，可以做到0丢失</td></tr><tr><td style="text-align:center">核心特点</td><td style="text-align:center">MQ领域的功能及其完备</td><td style="text-align:center">基于erlang开发，所以并发能力很强，性能及其好，延时很低</td><td style="text-align:center">MQ功能较为完善，还是分布是式的，扩展性好</td><td style="text-align:center">功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是实时的标准</td></tr><tr><td style="text-align:center">优劣势总结</td><td style="text-align:center">非常成熟，功能强大，在业内大量的公司以及项目中都有应用。<br>偶尔会有低概率丢失消息，而且现在社区以及国内应用都越来越少，官方社区对其维护越来越少，而且主要是基于解耦合异步来用的，较少在大规模吞吐的场景中使用</td><td style="text-align:center">erlang语言开发，性能及其好；而且开源提供的管理界面非常棒，用起来非常好用，在国内一些互联网近几年用rabbitmq也比较多。<br>但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。而且erlang开发，…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><p>综上所述，经过对比：</p><p>​    一般的业务系统要引入MQ，最早大家都用ActiveMQ，但是现在大家用的都不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，不太推荐。</p><p>​    后来大家都去用RabbitMQ，但是确实erlang语言阻止了大量的java工程师去深入研究和掌控他，对公司来说，几乎处于不可控的状态，但是确实是开源的，比较稳定的支持，活跃度也较高。</p><p>​    ……</p><h2 id="3-如何保证消息队列的高可用"><a href="#3-如何保证消息队列的高可用" class="headerlink" title="3.如何保证消息队列的高可用"></a>3.如何保证消息队列的高可用</h2><h4 id="（1）RabbitMQ的高可用"><a href="#（1）RabbitMQ的高可用" class="headerlink" title="（1）RabbitMQ的高可用"></a>（1）RabbitMQ的高可用</h4><p>​    RabbitMQ基于主从做高可用的</p><h5 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h5><p>  ​    demo使用，生产环境不会使用。</p><h5 id="普通集群模式"><a href="#普通集群模式" class="headerlink" title="普通集群模式"></a>普通集群模式</h5><p>  ​    就是在多台机器上启动多个rabbitmq实例，每个机器启动一个。但是所创建的queue，只会放在一个rabbitmq实例上，但是每个实例都同步queue的元数据，消费者消费消息时，如果连接的是另外一个实例，那么这个实例会从queue所在的实例上拉取数据过来。</p><p>  ​    这种方式其实也并不好，没有分布式，就是个普通集群因为这会导致消费者只能选择每次随机连接一个实例然后拉取数据，或者固定连接queue所在实例消费数据，前者有数据拉取的开销，后者导致单实例性能瓶颈。</p><p>  ​    而且如果放queue的实例宕机了，会导致接下来其他实例就无法从那个实例拉取，如果开启了消息持久化，让rabbit落地储存消息的话，消息不一定会丢，得等这个实例恢复了，然后才可以从这个queue拉取数据。</p><p>  ​    所以普通集群模式并没有高可用，这种方案主要是提高吞吐量。</p><h5 id="镜像集群模式"><a href="#镜像集群模式" class="headerlink" title="镜像集群模式"></a>镜像集群模式</h5><p>  ​    这种模式，才是rabbitmq的高可用方案，与普通集群模式不同，生产者所创建的queue，无论是元数据还是queue里的消息都会存在于多个实例上。每次写消息到queue的时候,rabbitmq都会把queue的消息自动同步到多个实例。</p><p>  ​    镜像集群的好处是真正的高可用，任何一个机器宕机了，其他机器都可以使用。坏处在于：性能开销很大，消息同步到所有机器，导致网络带宽压力和消耗很重；另外。这样的话拓展性差，如果某个queue负载很重，加机器的话那么新增的机器也包含了这个queue的所有数据，并没有办法线性扩展queue。</p><p>  ​    镜像集群的开启：rabbitmq有很好的管理控制台，可以在后台新增一个策略，这个策略就是集群模式的策略，指定的时候可以要求数据同步到所有节点，也可以要求同步到指定的节点。然后再次创建queue的时候，应用这个策略，就会自动将数据同步到其他的节点上。</p><h4 id="（2）Kafka的高可用"><a href="#（2）Kafka的高可用" class="headerlink" title="（2）Kafka的高可用"></a>（2）Kafka的高可用</h4><p>  ​    分布式加主从复制……</p><h2 id="4-如何保证消息不被重复消费？-如何保证消费消费的幂等性"><a href="#4-如何保证消息不被重复消费？-如何保证消费消费的幂等性" class="headerlink" title="4.如何保证消息不被重复消费？(如何保证消费消费的幂等性)"></a>4.如何保证消息不被重复消费？(如何保证消费消费的幂等性)</h2><h4 id="（1）消息重复发送的场景"><a href="#（1）消息重复发送的场景" class="headerlink" title="（1）消息重复发送的场景"></a>（1）消息重复发送的场景</h4><ul><li>消费者已经处理完数据，但还没来得及确认，服务器宕机，rabbitmq(其他类似)没有收到确认会认为消息没有被消费，会重复发送消息给消费者</li></ul><h4 id="（2）如何保证幂等性"><a href="#（2）如何保证幂等性" class="headerlink" title="（2）如何保证幂等性"></a>（2）如何保证幂等性</h4><p>​    结合具体场景，比如：</p><pre><code>- 如果消费者模块要执行数据库写，可以根据主键查一下，如果数据有了，就别插入了，update即可- 如果是写redis，那没问题，因为每次都指定set操作，覆盖而已不会有问题，redis天然幂等性- 不是以上场景，稍微复杂的情况下可以让生产者发送每条数据的时候，里面加一个全局的id类似订单id之类的东西，然后消费者消费消息的时候，先根据这个id去redis里面查一下(之前消费的消息数据保存在redis中)，如果没有消费过，就处理，然后将这个id写到redis。如果消费过了，就不再处理，保证别重复处理相同的消息即可。- 还有基于数据库的唯一键来保证重复数据不会重复插入多条。</code></pre><p>​    总之保证MQ的幂等性要结合具体业务来看。</p><h2 id="5-如何保证消息的可靠性传输（如何处理消息丢失的问题）"><a href="#5-如何保证消息的可靠性传输（如何处理消息丢失的问题）" class="headerlink" title="5.如何保证消息的可靠性传输（如何处理消息丢失的问题）"></a>5.如何保证消息的可靠性传输（如何处理消息丢失的问题）</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM常见问题</title>
      <link href="/2018/12/16/JVM%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2018/12/16/JVM%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC-Root？"><a href="#1-JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC-Root？" class="headerlink" title="1. JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Root？"></a>1. JVM垃圾回收的时候如何确定垃圾？是否知道什么是GC Root？</h3><ul><li><p>什么是垃圾？</p><p>简单说就是内存中已经不再被使用的空间就是垃圾。</p></li><li><p>要进行垃圾回收，如何判断一个对象可以被回收？</p><ul><li><p>引用计数法（无法解决循环引用，已经不再使用）</p></li><li><p>枚举根节点做可达性分析（根搜索路径）</p><p><img src="/images/jvm/GC roots.png" alt></p><p>所谓的”GC roots”或者说traceing GC的“根集合”就是<strong>一组必须活跃的引用</strong>。</p><p><strong>基本思路就是通过一系列名为“GC Roots”的对象作为起始点，</strong>从这个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。也即给定一个集合的引用作为根处出发，通过引用关系遍历对象树，能被遍历到的（可达的）对象就被判定为存活；没有遍历到的就自然被判定为死亡。</p></li></ul></li><li><p>Java中可以作为GC Roots的对象</p><ul><li>虚拟机栈（栈帧中的局部变量区，也叫局部变量表）中引用的对象；</li><li>方法区中的类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI(Native)引用的对象；</li></ul></li></ul><h3 id="2-如何盘点查看JVM系统默认值？"><a href="#2-如何盘点查看JVM系统默认值？" class="headerlink" title="2. 如何盘点查看JVM系统默认值？"></a>2. 如何盘点查看JVM系统默认值？</h3><h4 id="2-1-JVM的参数类型"><a href="#2-1-JVM的参数类型" class="headerlink" title="2.1 JVM的参数类型"></a>2.1 JVM的参数类型</h4><ol><li>标配参数(了解)<ul><li>-vsersion</li><li>-help</li><li>java -showversion</li></ul></li><li>x参数(了解)<ul><li>-Xint  解释执行</li><li>Xcomp 第一次使用就编译成本地代码</li><li>-Xmixed 混合模式</li></ul></li><li><strong>xx参数</strong></li></ol><ul><li><p>Boolean类型</p><p>-XX:+或者-某个属性值</p><p>+表示开启</p><p>-表示关闭</p><p>Case:</p><ul><li>是否打印GC手机细节：-XX:-/+PrintGCDetails</li><li>是否使用串行垃圾收集器：-XX:-/+UseSerialGC</li></ul></li><li><p>KV设值类型</p><p>公式：-XX:属性key=属性value</p><p>Case:</p><ul><li>-XX:MetaspaceSize=128m</li><li>-XX:MaxTenuringThreshold=15</li></ul></li></ul><ol start="4"><li><p>jinfo举例，如何查看当前运行程序的配置(第一种查看方法)</p><ul><li>jinfo -flag 具体参数 java进程号</li><li>jinfo -flags java进程号</li></ul></li><li><p>例外（坑）</p><p>两个经典参数-Xms和-Xmx，如何解释？</p><ul><li>-Xms 等价于：-XX:InitialHeapSize</li><li>-Xmx 等价于：-XX:MaxHeapSize</li></ul></li></ol><h4 id="2-2-查看JVM参数-第二种"><a href="#2-2-查看JVM参数-第二种" class="headerlink" title="2.2 查看JVM参数(第二种)"></a>2.2 查看JVM参数(第二种)</h4><ul><li><p>java -XX:+PrintFlagsInitial [-version]    (查看初始默认值)</p></li><li><p>java -XX:+PrintFlagsFinal [-version]     (主要查看修改更新)</p><p>= 为为修改过的</p><p>:=为修改过的</p></li><li><p>java -XX:+PrintCommandLineFlags [-version]</p></li></ul><h4 id="3-工作中常用参数"><a href="#3-工作中常用参数" class="headerlink" title="3 工作中常用参数"></a>3 工作中常用参数</h4><ul><li><p>-Xms 初始大小内存，默认为物理内存1/64</p><p>等价于    -XX:InitialHeapSize</p></li><li><p>-Xmx 最大分配内存，默认为物理内存1/4(内存大于192M时，否则为一半)</p><p>等价于    -XX:MaxHeapSize</p></li><li><p>-Xss 设置单个线程栈的大小，一般默认是512k~1024k</p><p>等价于    -XX:ThreadStackSize</p></li><li><p>-Xmn 设置年轻代大小，一般不调</p></li><li><p>-XX:MetaspaceSize</p><p>设置元空间大小：元空间的本质和永生代类似，都是对JVM规范中方法区的实现。不过元空间与永生代最大的区别在于：<strong>元空间并不在虚拟机中，二货思使用本地内存 </strong>。因此，默认情况下，元空间的大小仅受本地内存限制(但默认值不到21M,所以有时候要调整元空间的大小)。</p><p>典型： -Xms128m -Xmx4096m -Xss1024k -XX:MetaspaceSize=512m -XX:+PrintCommandLineFlags </p><p>-XX:+PrintGCDetails -XX:+UseSerialGC    (常用参数，值不一定是这个)</p></li><li><p>-XX:+PrintGCDetails</p><ul><li><p>输出详细GC收集日志信息</p><p>[GC (Allocation Failure) [PSYoungGen: 1848K-&gt;488K(2560K)] 1848K-&gt;732K(9728K), 0.0013387 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</p><p>[Full GC (Allocation Failure) [PSYoungGen: 472K-&gt;0K(2560K)] [ParOldGen: 244K-&gt;621K(7168K)] 716K-&gt;621K(9728K), [Metaspace: 3425K-&gt;3425K(1056768K)], 0.0054785 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </p></li><li><p>GC</p><p>举例：</p><p><img src="/images/jvm/GC垃圾回收参数解读.png" alt></p><p>[GC [PSYoungGen: 334480k-&gt;4736K(334848K)] 597914-&gt;270331(1017536K), 0.0209890 secs] [Times: user=0.03 sys=0.00, real=0.02 secs]</p></li><li><p>FullGC</p><p>Full GC (Full GC大部分发生在老年代)：</p><p>[Full GC (Allocation Failure) [PSYoungGen: 472K-&gt;0K(2560K)] [ParOldGen: 244K-&gt;621K(7168K)] 716K-&gt;621K(9728K), [Metaspace: 3425K-&gt;3425K(1056768K)], 0.0054785 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]</p><p>举例：</p><p><img src="/images/jvm/Full GC垃圾回收参数解读.png" alt></p><p>[Full GC (System) [PSYoungGen: 3408K-&gt;0K(298688K)] [ParOldGen: 0K-&gt;3363K(682688K)] 3408K-&gt;3363K(991376K), [Metaspace: 10638K-&gt;10638K(131072K)], 0.0372600 secs] [Times: user=0.03 sys=0.00, real=0.04 secs]</p></li></ul></li><li><p>-XX:SurvivorRatio  设置新生代中eden和S0/S1的比例</p><p>默认：-XX:SurvivorRatio=8，即 Eden:S0:S1 = 8:1:1</p><p>假如：-XX:SurvivorRatio=4，即 Eden:S0:S1 = 4:1:1</p><p>SurvivorRatio值就是设置Eden区在新生代的比例占多少，S0/S1相同</p></li><li><p>-XX:NewRatio </p><p>配置年轻代与老年代在堆空间的占比；</p><p>默认：</p><p>​        -XX:NewRatio=2,新生代占1，老年代2，年轻代占整个堆的1/3;</p><p>假如：</p><p>​        -XX:NewRatio=4，新生代占1，老年代4，年轻代占整个堆的1/5。</p></li><li><p>-XX:MaxTenuringThreshold 设置垃圾的最大年龄</p><p>默认值为15，超过这个值后对象由新生代转移至老年代</p><p>java8设置值必须在0-15</p></li></ul><h4 id="4-强引用、软引用、弱引用、虚引用分别是什么？"><a href="#4-强引用、软引用、弱引用、虚引用分别是什么？" class="headerlink" title="4.强引用、软引用、弱引用、虚引用分别是什么？"></a>4.强引用、软引用、弱引用、虚引用分别是什么？</h4><ul><li><p>强引用</p><p>默认的引用，大部分引用都是强引用</p><p>*当内存不足时，JVM开始垃圾回收，对于强引用的对象，<strong>就算是出现了OOM也不会对该对象进行回收</strong>。</p><p>强引用是我们最常见的普通对象引用，只要强引用指向一个对象，就能表明对象还“或者”，垃圾收集器不会回收这种对象。在Java中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用类型就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，<strong>即使该对象以后永远都不会被用到JVM也不会回收</strong>。因此强引用是造成Java内存泄漏的主要原因之一。</p><p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null,一般认为就是可以被垃圾收集的了（当然具体回收时机还是看垃圾收集策略）。</p></li><li><p>软引用</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM</title>
      <link href="/2018/11/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM/"/>
      <url>/2018/11/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM/</url>
      
        <content type="html"><![CDATA[<h3 id="1-类加载"><a href="#1-类加载" class="headerlink" title="1.类加载"></a>1.类加载</h3><p><img src="/images/jvm/类加载及对象实例化.png" alt></p><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><p>在java代码中，<strong>类型</strong>(不是对象)的加载、连接与初始化过程都是在程序运行期间完成的。</p><p>这样提供了更大的灵活性，增加了更多的可能性。</p><h4 id="1-2-生命周期"><a href="#1-2-生命周期" class="headerlink" title="1.2 生命周期"></a>1.2 生命周期</h4><p> 在如下情况下下，Java虚拟机将结束生命周期：</p><ul><li><p>执行了System.exit()方法</p><ul><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或错误而异常终止</li><li>由于操作系统出现错误而导致Java虚拟机进程终止</li></ul></li></ul><h4 id="1-3-类的加载、连接与初始化"><a href="#1-3-类的加载、连接与初始化" class="headerlink" title="1.3 类的加载、连接与初始化"></a>1.3 类的加载、连接与初始化</h4><h5 id="1-3-1-类的加载"><a href="#1-3-1-类的加载" class="headerlink" title="1.3.1 类的加载"></a>1.3.1 类的加载</h5><ul><li><p>类的加载指的是将类的.class文件的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（虚拟机规范并未说明Class对象位于哪里，HotSpot虚拟机将其放在了方法区中）用来封装类在方法区的数据结构。<strong>类的加载的最终产品是位于内存中的Class对象</strong>，Class对象封装了类在方法区的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p></li><li><p>加载.class文件的方式：</p><ul><li>从本地系统中直接加载</li><li>通过网络下载.class文件</li><li>从zip,jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li><strong>将Java源文件动态编译成.class文件（动态代理）</strong></li></ul></li><li><p>两种类型的类加载器</p><ul><li>Java虚拟机自带的类加载器<ul><li>根类加载器（BootStrap）</li><li>扩展类加载器（Extension）</li><li>系统（应用）类加载器（System）</li></ul></li><li>用户自定义的类加载器<ul><li>java.lang.ClassLoader的子类</li><li>用户可以定制类的加载方式</li></ul></li></ul><p>​    类加载器并不需要等到某个类被”首次主动使用”时再加载它；</p><p>​    JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件确实或者存在错误，类加载器必须在<strong>程序首次主动</strong>使用该类时才报告错误（LinkageError错误）；</p><p>​    如果这个类一直没有被程序主动使用，那么<strong>类加载器就不会报告错误</strong>；</p></li><li><p><strong>类加载器的双亲(父亲)委托机制</strong></p><p>​    在双亲委托机制中，各个加载器按照父子关系 形成了<strong>树形结构(逻辑上的树形结构，不是继承上的)</strong>，除了根类加载器之外，其余的类加载器有且只有一个父加载器；</p><p>​    双亲委托机制：</p><pre><code>- 自底向上检查类是否已被加载；- 自上到下尝试加载类；</code></pre><p>​    </p></li></ul><h5 id="1-3-2-连接"><a href="#1-3-2-连接" class="headerlink" title="1.3.2 连接"></a>1.3.2 连接</h5><ul><li>验证：确保被加载类的正确性；</li><li>准备：为类的<strong>静态变量</strong>分配内存，并将其初始化为<strong>默认值</strong>；</li><li>解析：<strong>把类中的符号引用转换为直接直接引用</strong>；</li></ul><h5 id="1-3-3-初始化"><a href="#1-3-3-初始化" class="headerlink" title="1.3.3 初始化"></a>1.3.3 初始化</h5><p><strong>类的初始化：为类的静态变量赋予正确的初始值</strong></p><p>Java程序对类的使用方式可以分为两种：</p><ul><li><p>主动使用</p><ul><li><p>创建类的实例</p></li><li><p>访问某个类或接口的静态变量，或者对该静态变量赋值</p></li><li><p>调用类的静态方法</p></li><li><p>反射</p></li><li><p>初始化一个类的子类则父类先被初始化</p></li><li><p>Java虚拟机启动时被标记为启动类的类</p></li><li><p>JDK1.7开始提供的动态语言支持：</p><p>java.lang.invoke.MethodHandle实例的解析结果REF_getStatic,REF_putStatic,REF_invokeStatic句柄对应的类没有初始化，则初始化。</p></li></ul></li><li><p>被动使用</p></li></ul><p>所有Java虚拟机实现必须在每个类或接口被Java程序“<strong>首次主动使用</strong>”时才初始化他们；</p><p>example1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.jvm.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过子类访问父类中定义的静态变量，则父类被初始化而子类不会被初始化；而访问子类直接定义的静态变量时，父类先被初始化并且子类也被初始化。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyChild1.str1);</span><br><span class="line">        <span class="comment">//System.out.println(MyChild1.str2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent1</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String str1= <span class="string">"MyParent1"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChild1</span> <span class="keyword">extends</span> <span class="title">MyParent1</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String str2= <span class="string">"MyChild1"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyChild1 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.jvm.classloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">常量在编译阶段会被存入到调用这个常量的方法所在的类的常量池中，本质上，调用类并没有直接引用到定义常量的类，因此并不会触发定义常量的类的初始化</span></span><br><span class="line"><span class="comment">注意：这里指的是将常量存放到了MyTest2的常量池中(调用类),之后MyTest2与MyParent2就没有任何关系了，甚至，我们可以将MyParent2的class文件删除</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent2.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent2 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    执行javap -c  MyTest2.class反编译，可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class com.lixiang.jvm.classloader.MyTest2 &#123;</span><br><span class="line">  public com.lixiang.jvm.classloader.MyTest2();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: ldc           #4                  // String hello world</span><br><span class="line">       5: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">       8: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中助记符ldc表示：将int，float或者是String类型的常量值从常量池中推送至栈顶</p><p>ps助记符: </p><p>​    bipush 表示将单字节(-128 ~ 127)的常量值推送至栈顶,如short;</p><p>​    sipush 表示将一个短整型常量池(-32768 ~ 32767)的常量值推送至栈顶;</p><p>​    iconst_1 表示将int类型的1推送至栈顶(iconst_m1 ~ iconst_5);</p><p>example3:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.jvm.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当一个常量的值并非编译期间可以确定的，那么其值就不会被放到调用类的常量池中</span></span><br><span class="line"><span class="comment">这时在程序运行时，会导致主动使用这个常量所在的类，显然会导致这个类被初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyParent3.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent3 ststic block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example4:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.jvm.classloader;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">不会执行MyParent4的静态代码块</span></span><br><span class="line"><span class="comment">对于数组实例来说，其类型是由JVM在运行期间动态生成的，表[Lcom.lixiang.jvm.classloader.MyParent4这种形式。动态形成的类型，其父类型就是Object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//MyParent4 myParent4 = new MyParent4();</span></span><br><span class="line">        MyParent4[] myParent4s = <span class="keyword">new</span> MyParent4[<span class="number">1</span>];</span><br><span class="line">        System.out.println(myParent4s.getClass());</span><br><span class="line">        System.out.println(myParent4s.getClass().getSuperclass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========"</span>);</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        System.out.println(ints.getClass().getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyParent4</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyParent4 static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class com.lixiang.jvm.classloader.MyTest4 &#123;</span><br><span class="line">  public com.lixiang.jvm.classloader.MyTest4();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: iconst_1</span><br><span class="line">       1: anewarray     #2                  // class com/lixiang/jvm/classloader/MyParent4</span><br><span class="line">       4: astore_1</span><br><span class="line">       5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       8: aload_1</span><br><span class="line">       9: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">      12: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      15: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      18: aload_1</span><br><span class="line">      19: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">      22: invokevirtual #6                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span><br><span class="line">      25: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      28: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      31: ldc           #7                  // String ========</span><br><span class="line">      33: invokevirtual #8                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      36: iconst_1</span><br><span class="line">      37: newarray       int</span><br><span class="line">      39: astore_2</span><br><span class="line">      40: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      43: aload_2</span><br><span class="line">      44: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">      47: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      50: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      53: aload_2</span><br><span class="line">      54: invokevirtual #4                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">      57: invokevirtual #6                  // Method java/lang/Class.getSuperclass:()Ljava/lang/Class;</span><br><span class="line">      60: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">      63: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps助记符：</p><p>​    anewaray：表示创建一个引用类型（如类、接口、数组）的数组，并将其引用值压入栈顶；</p><p>​    newarray：表示创建一个指定的原始类型（如int、float、char等）的数组，并将其引用值压入栈顶；</p><ul><li><p>初始化对于类与接口的异同点</p><p>当Java虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口：</p><ul><li>在初始化一个类时，并不会先初始化它所实现的接口；</li><li>在初始化一个接口时，并不会先初始化它的父接口；</li></ul><p>因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</p></li></ul><h4 id="1-4-JVM参数"><a href="#1-4-JVM参数" class="headerlink" title="1.4 JVM参数"></a>1.4 JVM参数</h4><ul><li>-XX:+<option> ,表示开启option选项；</option></li><li>-XX:-<option> ,表示关闭option选项；</option></li><li>-XX:<option>=<value> ,表示将option选项的值设置为vlaue；</value></option></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发</title>
      <link href="/2018/10/25/Java%E5%B9%B6%E5%8F%91/"/>
      <url>/2018/10/25/Java%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="栅栏模式"><a href="#栅栏模式" class="headerlink" title="栅栏模式"></a>栅栏模式</h3><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>  减计数器：计数器减到0时，继续执行。即计数器在多个线程内依次减到0时，被减计数器栓等待的线程才会继续向下执行。</p><p>  demo:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.barrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(N);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;N ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"完成准备工作"</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+N+<span class="string">"个准备工作全部完成，开始执行真正的任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>  循环(复用)栅栏：当在栅栏外的任务数达到规定的数目时，就放行目标任务一次，可以多次复用。</p><p>  demo:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.barrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">7</span>,</span><br><span class="line">                () -&gt; System.out.println(<span class="string">"召唤神龙"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> temp = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">"收集到第"</span> + temp + <span class="string">"颗龙珠"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>  信号灯：信号量主要用于两个目的，一个是用于<b>多个</b>共享资源的互斥使用，另一个用于并发线程数的控制；</p><p>  类比：多辆车抢多个车位</p><p>  demo:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.barrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//模拟3个车位</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"\t抢到车位"</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"\t停留3秒后离开车位"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><h4 id="（1）阻塞队列什么时候是有好处的-一般阻塞是不好的-？"><a href="#（1）阻塞队列什么时候是有好处的-一般阻塞是不好的-？" class="headerlink" title="（1）阻塞队列什么时候是有好处的(一般阻塞是不好的)？"></a>（1）阻塞队列什么时候是有好处的(一般阻塞是不好的)？</h4><p>​        比如：火锅店，来了就是客，欢迎在休闲区等待，一旦有空位客人立马可以就坐；</p><h4 id="（2）不得不阻塞的时候怎么管理"><a href="#（2）不得不阻塞的时候怎么管理" class="headerlink" title="（2）不得不阻塞的时候怎么管理"></a>（2）不得不阻塞的时候怎么管理</h4><h4 id="（3）阻塞队列的特性"><a href="#（3）阻塞队列的特性" class="headerlink" title="（3）阻塞队列的特性"></a>（3）阻塞队列的特性</h4><p>​        当阻塞队列是<strong>空</strong>的时候，从队列里面<strong>获取</strong>元素的操作将会被阻塞；</p><p>​        当阻塞队列是<strong>满</strong>时，往队列里面<strong>添加</strong>元素的操作会被阻塞；</p><p>​        <img src="/images/concurrent/BlockingQueue.png" alt="BlockingQueue"></p><p>​        在多线程领域，所谓阻塞，在某些情况下会<strong>挂起</strong>线程（即阻塞），一旦条件满足，被挂起的线程又会被<strong>唤醒</strong>。</p><h4 id="（4）为什么需要BlockingQueue"><a href="#（4）为什么需要BlockingQueue" class="headerlink" title="（4）为什么需要BlockingQueue?"></a>（4）为什么需要BlockingQueue?</h4><p>​        好处是我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，利用阻塞队列可以轻松实现相同的效果。在concurent包发布之前，在多线程环境下，<strong>程序员需要自己去控制这些细节，尤其是还要兼顾效率和线程安全</strong>，而这样会给多线程程序的开发带来不小的复杂性。</p><h4 id="（5）阻塞队列类型"><a href="#（5）阻塞队列类型" class="headerlink" title="（5）阻塞队列类型"></a>（5）阻塞队列类型</h4><ul><li><strong>ArrayBlockingQueue：由数组结构实现的有界阻塞队列(相当于阻塞的ArrayList)；</strong></li><li><strong>LinkedBlockingQueue:由链表结构实现的有界（但大小默认值是Integer.MAX.VALUE，所以慎用）阻塞队列；</strong></li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列；</li><li>DelayQueue：使用优先级队列实现的延迟无界阻塞队列；</li><li><strong>SynchronousQueue：不储存元素的阻塞队列，也即单个元素的队列；</strong></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列；</li><li>LinkedBlockingDeque：由链表结构组成的双向阻塞队列。</li></ul><h4 id="（6）BlockingQueue的核心方法"><a href="#（6）BlockingQueue的核心方法" class="headerlink" title="（6）BlockingQueue的核心方法"></a>（6）BlockingQueue的核心方法</h4><table><thead><tr><th style="text-align:center">方法类型</th><th style="text-align:center">抛出异常</th><th style="text-align:center">特殊值</th><th style="text-align:center">阻塞</th><th style="text-align:center">超时</th></tr></thead><tbody><tr><td style="text-align:center">插入</td><td style="text-align:center">add(e)</td><td style="text-align:center">offer(e)</td><td style="text-align:center">put(e)</td><td style="text-align:center">offter(e,time,unit)</td></tr><tr><td style="text-align:center">移除</td><td style="text-align:center">remove</td><td style="text-align:center">poll()</td><td style="text-align:center">take()</td><td style="text-align:center">poll(time,unit)</td></tr><tr><td style="text-align:center">检查</td><td style="text-align:center">element()</td><td style="text-align:center">peek()</td><td style="text-align:center">不可用</td><td style="text-align:center">不可用</td></tr></tbody></table><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>抛出异常</td><td>当阻塞队列满时，再往队列里add插入元素会抛出IllegalStateException:Queue full<br>当阻塞队列为空时，再从队列里remove移除元素会抛出NoSuchElementExcaption</td></tr><tr><td>特殊值</td><td>插入方法，成功true失败false<br>移除方法，成功返回队列的元素，队列里面没有元素返回null</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者线程继续往队列里面put元素，队列会一直阻塞生产线程直到take元素或者中断退出<br>当阻塞队列空时，消费者线程试图从线程里take元素，队列会一直阻塞消费者线程直到队列可用</td></tr><tr><td>超时阻塞</td><td>当阻塞队列满时，生产者线程继续往队列里面offer元素，队列会阻塞生产线程直到在规定时间内队列可用<br>当阻塞队列空时，消费者线程试图从线程里poll元素，队列会阻塞消费者线程直到在规定时间内队列可用</td></tr></tbody></table><h4 id="（7）阻塞队列的用处"><a href="#（7）阻塞队列的用处" class="headerlink" title="（7）阻塞队列的用处"></a>（7）阻塞队列的用处</h4><ul><li><p>生产者消费者模式</p><ul><li>传统版</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.blockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-05-09 0:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareData</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//1.等待，不能生产</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.干活</span></span><br><span class="line">            num++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">            <span class="comment">//3.通知唤醒</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//1.等待，不能消费</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.干活</span></span><br><span class="line">            num--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">            <span class="comment">//3.通知唤醒</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TradationalProConDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShareData shareData = <span class="keyword">new</span> ShareData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                shareData.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"AA"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                shareData.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"BB"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ps：synchronized和Lock的区别</p><ol><li><p>原始构成：</p><p>synchronized是关键字，属于JVM层面，底层有两步动作：monitorenter(底层是通过monitor对象来完成)，monitorexit，其实wait/nofity/notifyAll也依赖于monito对象，所以wait/notify/notifyAll必须写在同步代码块里面；</p><p>Lock是具体的类（接口，java.util.concurrent.locks.Lock）：是API层面的锁。</p></li><li><p>使用方法</p><p>synchrozined不需要手动去释放锁，当synchronized代码执行完后系统会自动让线程释放对锁的占用；</p><p>ReentrantLock需要用户去手动释放锁，若没有主动去释放锁就可能导致出现死锁现象，需要lock()和unlock()配合try/finally语句块来完成。</p></li><li><p>等待是否可中断</p><p>synchronized不可中断，除非抛出异常或者正常运行完成；</p><p>ReentrantLock可中断：1）设置超时方法 tryLock(long timeout, TimeUnit unit)；</p><p>​                                         2）使用lock.lockInterruptibly()，调用interrupt()方法可中断。</p></li><li><p>加锁是否公平</p><p>synchronized是非公平锁；</p><p>ReentrantLock默认是非公平锁，但其构造方法中可以传入boolean值，true为公平锁，false为非公平锁。</p></li><li><p>锁绑定多个条件Condition</p><p>synchronized没有</p><p>ReentrantLock可以实现分组唤醒需要唤醒的线程们，可以精确唤醒，而synchronized要么随机唤醒一个要么全部唤醒。</p><p>demo：多线程之间按顺序调用，实现A-B-C，要求：AA线程打印5次，BB线程打印10次，CC线程打印15次，然后总共循环10次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.blockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition c1 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition c2 = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition c3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">1</span>) &#123;</span><br><span class="line">                c1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">            &#125;</span><br><span class="line">            num = <span class="number">2</span>;</span><br><span class="line">            c2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">2</span>) &#123;</span><br><span class="line">                c2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">            &#125;</span><br><span class="line">            num = <span class="number">3</span>;</span><br><span class="line">            c3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print15</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num != <span class="number">3</span>) &#123;</span><br><span class="line">                c3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t"</span> + num);</span><br><span class="line">            &#125;</span><br><span class="line">            num = <span class="number">1</span>;</span><br><span class="line">            c1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShareResource shareResource = <span class="keyword">new</span> ShareResource();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                shareResource.print5();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"AA"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                shareResource.print10();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"BB"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                shareResource.print15();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"CC"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li><p>阻塞队列版</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lixiang.concurrent.blockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2019-05-09 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcurrentData</span> </span>&#123;</span><br><span class="line">    <span class="comment">//生产消费开始结束标识，true为生产消费，false为停止</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    BlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentData</span><span class="params">(BlockingQueue&lt;String&gt; blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> retFlag;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                data = atomicInteger.incrementAndGet() + <span class="string">""</span>;</span><br><span class="line">                retFlag = blockingQueue.offer(data, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">if</span> (retFlag) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"\t插入队列插入"</span> + data + <span class="string">"成功"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"\t插入队列插入"</span> + data + <span class="string">"失败，队列已满"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*这里暂停1秒只是为了看得清楚,不暂停的话实际情况应该是一直不停的生产消费,每秒</span></span><br><span class="line"><span class="comment">                几万次(生产消费输出顺序也会有一点点错乱,但是只是多线程导致的输出时</span></span><br><span class="line"><span class="comment">                 序和生产消费一点不一样，但生产消费是对的，即先生产再消费)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                result = blockingQueue.poll(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == result || <span class="string">""</span>.equals(result)) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"\t超过两秒没有取到队列的值，消费退出"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t消费队列取出"</span> + result + <span class="string">"成功"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingProConDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ConcurrentData concurrentData = <span class="keyword">new</span> ConcurrentData(<span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t生产者线程启动，开始生产"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            concurrentData.produce();</span><br><span class="line">        &#125;, <span class="string">"生产者"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t消费者线程启动，开始消费"</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            concurrentData.consume();</span><br><span class="line">        &#125;, <span class="string">"消费者"</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"5秒后下令停止生产和消费过程"</span>);</span><br><span class="line">        concurrentData.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>线程池</p><ul><li><p>为什么使用线程池，优势</p><p>​    线程池做的工作主要是控制运行的线程的数量，<strong>处理过程中将任务放入队列</strong>，然后在线程创建后启动这些任务，<strong>如果线程数量超过了最大数量超出数量的线程排队等候</strong>，等其他线程执行完毕，再从队列中取出任务来执行。</p><p>​    线程池的主要特点是：<strong>线程复用；控制最大并发量；管理线程。</strong></p><p>好处</p><ul><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的开销。</li><li>提高响应速度。当任务到达时，任务可以不需要等待创建线程而立即执行。</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建线程，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><p>​    </p></li><li><p>线程池如何使用</p><p>线程池的顶层接口:</p><p><img src="/images/concurrent/ThreadPoolExecutor.png" alt></p><p>5种线程池：</p><p>​    <strong>Executors.newFixedThreadPool(int nThreads)</strong>:一池多个(固定)处理线程，适用于执行长期任务，性能好很多；</p><p>​    <strong>Executors.newSingleThreadExecutor()</strong>：一池一个处理线程，适用于一个任务一个任务执行的场景；</p><p>​    <strong>Executors.newCachedThreadPool</strong>一池N个处理线程，适用于执行很多短期异步的小程序或者负载较轻的服务；</p><p>​    Executors.newSingleThreadScheduledExecutor()；</p><p>​    Executors.newScheduledThreadPool(int corePoolSize)；</p></li><li><p>线程池的几个重要参数介绍</p><p>7大参数(底层7，呈现出来5):</p><p>5参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7参数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7大参数简介:</p><ul><li>corePoolSize：线程池中的常驻核心线程数；</li><li>maximumPoolSize：线程池能够容纳同时执行的最大线程数，此值必须大于等于1；</li><li>keepAliveTime：多余的空闲线程的存活时间，当前线程池数量超过corePoolSize时，当空闲时间达到keepAliveTime时，多余空闲线程会被销毁直到只剩下corePoolSize个线程为止；</li><li>unit：keepAliveTime的单位；</li><li>workQueue：任务队列，用于存放被提交但尚未执行的任务；</li><li>threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程，<strong>一般用默认的即可</strong></li><li>handler：拒绝策略：表示当队列满了并且工作线程大于等于线程池的最大线程池(maximumPoolSize)时如何来拒绝任务；</li></ul></li><li><p><strong>线程池的工作原理</strong></p><p>原理图:</p><p>I.</p><p><img src="/images/concurrent/线程池工作原理.png" alt></p><p>II.</p><p><img src="/images/concurrent/线程池的处理流程.png" alt></p><p><strong>流程</strong>：</p><ol><li><p>在创建了线程池后，等待提交过来的任务请求；</p></li><li><p>当调用execute()方法添加一个请求任务时，线程池会做以下判断：</p><p>2.1 如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</p><p>2.2 如果正在运行的数量大于或等于corePoolSize，那么将这个任务放入任务队列；</p><p>2.3 如果这个时候队列满了且正在运行的线程数量还小于maxinumPoolSize，那么还是创建线程立即运行这个任务；</p><p>2.4 如果队列满了且正在运行的线程数量大于或等于maxinumPoolSize，那么线程池后启动饱和拒绝策略；</p></li><li><p>当一个线程完成任务时，它从队列中取出下一个任务来执行；</p></li><li><p>当一个线程无事可做超过一定的时间(keepAliveTime)时，线程池会判断：</p><p>如果当前运行的线程数大于corePoolSize，那么这个线程就会被停掉，所以线程池的所有任务完成后它<strong>最终会收缩到corePoolSize的大小</strong>；</p></li></ol></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装npm和使用cnpm</title>
      <link href="/2018/04/20/CentOS%E5%AE%89%E8%A3%85npm%E5%92%8C%E4%BD%BF%E7%94%A8cnpm/"/>
      <url>/2018/04/20/CentOS%E5%AE%89%E8%A3%85npm%E5%92%8C%E4%BD%BF%E7%94%A8cnpm/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装npm"><a href="#1-安装npm" class="headerlink" title="1.安装npm"></a>1.安装npm</h3><p>npm命令是node.js的npm 插件管理器，也就是下载插件安装插件的管理器。</p><p>安装命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br></pre></td></tr></table></figure><p>若报错:没有可用软件包 nodejs。</p><p>则先下载epel-release</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>安装成功后可查看版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>或:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="2-使用淘宝的cnpm"><a href="#2-使用淘宝的cnpm" class="headerlink" title="2.使用淘宝的cnpm"></a>2.使用淘宝的cnpm</h3><p>因为npm下载都是国外服务器很慢会掉线，我们需要使用淘宝的npm镜像cnpm。</p><p>命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后就可以使用cnpm下载(将npm命令替换为cnpm即可)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7更换yum源</title>
      <link href="/2018/04/15/CentOS%E6%9B%B4%E6%8D%A2yum%E6%BA%90/"/>
      <url>/2018/04/15/CentOS%E6%9B%B4%E6%8D%A2yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1.备份"></a>1.备份</h3><p>进入yum.repo.d目录下将原来的文件重命名备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">mv CentOS-Base.repo CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure><h3 id="2-下载yum源"><a href="#2-下载yum源" class="headerlink" title="2.下载yum源"></a>2.下载yum源</h3><p>sohu的源：<a href="http://mirrors.sohu.com/help/CentOS-Base-sohu.repo" target="_blank" rel="noopener">http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</a></p><p>163的源：<a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p><p>阿里云的源：<a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a> </p><p>例如更换为阿里云的yum源:</p><p>CentOS7:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><p>CentOs6:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br></pre></td></tr></table></figure><h3 id="3-更新yum源"><a href="#3-更新yum源" class="headerlink" title="3.更新yum源"></a>3.更新yum源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><h3 id="4-更新yum源不更新内核"><a href="#4-更新yum源不更新内核" class="headerlink" title="4.更新yum源不更新内核"></a>4.更新yum源不更新内核</h3><p>若更新yum源时不想更新系统内核，则有两种方案：</p><ul><li><p><strong>修改yum的配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.conf</span><br><span class="line"><span class="meta">#</span>在最后添加</span><br><span class="line">exclude=kernel*</span><br><span class="line">exclude=centos-release*</span><br></pre></td></tr></table></figure></li><li><p><strong>直接在yum的命令后面加上如下的参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --exclude=kernel* update</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析HashMap</title>
      <link href="/2018/03/28/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90HashMap/"/>
      <url>/2018/03/28/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90HashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么需要HashMap？用处？"><a href="#1-为什么需要HashMap？用处？" class="headerlink" title="1 为什么需要HashMap？用处？"></a>1 为什么需要HashMap？用处？</h2><p>首先，Map是一个映射键和值的对象，类似于字典(Python中就有字典的概念)。</p><p>如果不考虑Map，我们常用的储存元素的容器大多是数组和链表。数组储存元素的好处在于根据下标查找元素迅速，因为不需要遍历元素，但其增加或删除元素却需要移动大量元素，因此数组在增删上性能不好(ArrayList也是一样的道理，本质也是数组)。而链表由于底层数据结构采用Node节点相连接，因此增删元素往往只涉及元素自身及其前后节点的操作，非常方便和快速，但其查找元素时需要遍历链表直到找到指定的元素为止，因此在需要大量的查找操作时链表性能往往不佳。</p><p>那么能不能有一种数据结构，能够满足查找和增删元素都非常快速？这个时候就出现了哈希表这种数据结构，相对而言，哈希表查询没数组快，插入没链表快，但却综合了两者的优点，在各个方面性能都能表现得比较好。</p><p>而HashMap就是一个哈希表的实现，在JDK1.8中，HashMap底层采用了<strong>数组+链表+红黑树</strong>实现，能够实现快速的查找和插入。HashMap能够根据键值快速的查找到相应的值，也能够根据要插入的值快速的定位插入，类似于前面说的字典的概念。</p><h2 id="2-HashMap的底层实现"><a href="#2-HashMap的底层实现" class="headerlink" title="2 HashMap的底层实现"></a>2 HashMap的底层实现</h2><p>HashMap底层采用<strong>数组+链表+红黑树</strong>实现，当往HashMap中插入键值对时，会根据key值的hashcode经过处理之后找到在<strong>哈希桶</strong>(即HashMap底层的数组)中对应的桶位置，将键值对(封装为<strong>Node</strong>元素)保存在桶中，若之后新添加的元素计算得出的位置已保存有元素时，则以<strong>单向链表</strong>的形式将新Node挂载到链表尾部，当链表中的元素个数超过阈值时单向链表会转换为<strong>红黑树</strong>。而查找元素时也是根据key值的hashcode找到对应的桶位置，再将key值与桶中链表或红黑树中的元素比较找出相等的key值，就找到了要查找的键值对，这样根据key值查找value值不需要遍历桶中所有的元素，根据key值的hashcode直接定位到对应的桶位置，再遍历桶中的链表比较即可找到要查找的元素。这样键值对的插入与查找性能都比较好。</p><p>HashMap示意图(未涉及红黑树时):</p><p><img src="/images/watermark/collection/HashMap.png" alt></p><p>首先，看一下HashMap封装的数据结构：</p><ul><li>Hash桶</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashMap中的节点数组，即Hash桶，用于存放元素链表或红黑树</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>Hash桶是HashMap中用于存放元素链表或红黑树的数组，看一下Node节点的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//处理后的hash码，可以标识key的位置</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="comment">//key值</span></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="comment">//value值</span></span><br><span class="line">        V value;</span><br><span class="line">    <span class="comment">//下一节点</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出，Node是一个单向链表的节点，当往HashMap中存放元素时，实际是往数组中保存Node对象，当一个桶中保存多个Node时，其实保存的是一个单向链表(桶中Node数量超过8时链表会转换为红黑树)。</p><p>下面再看一下HashMap中定义的一些变量或常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认容量，16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">//最大容量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//默认装载因子</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//阈值，当桶节点数量大于等于8时桶中保存的链表转换为红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//阈值，当桶节点数量变为小于等于6时桶中保存的红黑树转换为链表</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//当需要将桶中链表转换为红黑树时整个HashMap的最小容量值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"><span class="comment">//已保存的key-value键值对的个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">//已保存的key-value达到此阈值时需要调整容量大小(=capacity * load factor)</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">//哈希表的装载因子，计算threshold</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p>可以看出：</p><ul><li>整体上，HashMap定义了其默认容量、最大容量，以及需要调整容量时的阈值。</li><li>单个桶来说，定义了key-value的Node&lt;K,V&gt;的链表的阈值TREEIFY_THRESHOLD，超过此阈值时相应桶中的链表就需要转换为红黑树，以适应快速查找的要求；同时，当删除key-value时，桶中Node&lt;K,V&gt;数量减少,若桶中节点数量由8(TREEIFY_THRESHOLD)减少为6(UNTREEIFY_THRESHOLD)，则红黑树需要再转换为单向链表。</li></ul><p>有2个重要的特性影响着HashMap的性能，分别是capacity(容量)和load factor(加载因子)。</p><p>其中capacity表示哈希表bucket的数量，HashMap的默认值是16。load factor加载因子表示当一个map填满了达到这个比例之后的bucket时候，和ArrayList一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程也叫做重哈希。默认的load factor为0.75 。</p><p>这样，HashMap就利用<strong>数组+单向链表+红黑树</strong>实现了key-value的快速增删查改。至于实现的细节，接下来分为几个部分分开阐述。</p><h2 id="3-构造一个HashMap发生了什么"><a href="#3-构造一个HashMap发生了什么" class="headerlink" title="3 构造一个HashMap发生了什么"></a>3 构造一个HashMap发生了什么</h2><p>前面介绍了HashMap的底层数据结构以及一些变量和常量的意义，那么当我们使用HashMap时，其底层细节究竟是怎么实现的？</p><h4 id="3-1-无参的HashMap"><a href="#3-1-无参的HashMap" class="headerlink" title="3.1 无参的HashMap"></a>3.1 无参的HashMap</h4><p>先从无参构造(不指定容量),创建一个HashMap对象:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>new一个HashMap是简单的，看一下源码的调用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只是指定了装载因子为默认的装载因子(0.75f)，加上之前的介绍，可以知道我们会得到一个初始容量为16，装载因子为0.75的HashMap。</p><h3 id="3-2-指定初始容量"><a href="#3-2-指定初始容量" class="headerlink" title="3.2 指定初始容量"></a>3.2 指定初始容量</h3><p>创建一个HashMap对象，指定初始容量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>跟踪源码调用过程:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//装载因子为默认装载因子(0.75f)</span></span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用了有参构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">           initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                              loadFactor);</span><br><span class="line">    <span class="comment">//初始化装载因子</span></span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">//指定阈值</span></span><br><span class="line">       <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看出HashMap的阈值调用了内部方法tableSizeFor(int cap)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面这个方法最终使得 阈值 = 大于或等于指定容量的最小的2的整数次方，例如：</p><ul><li>指定初始容量为3，则初始化阈值为4</li><li>指定初始容量为5，则初始化阈值为8</li><li>……</li></ul><p>以5举例,=0101：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int n = 5-1 = 4;</span><br><span class="line">n = n | (n&gt;&gt;&gt;1) = 0101 | 0010 = 0111 = 7</span><br><span class="line">n = n | (n&gt;&gt;&gt;2) = 0111 | 0001 = 0111 = 7</span><br><span class="line">n = n | (n&gt;&gt;&gt;4) = 0111 | 0000 = 0111 = 7</span><br><span class="line">n = n | (n&gt;&gt;&gt;8) = 00000111 | 00000000 = 7</span><br><span class="line">n = n | (n&gt;&gt;&gt;16) = 00000111 | 00000000 = 7</span><br><span class="line">return n+1(8);</span><br></pre></td></tr></table></figure><p>返回后，HashMap的构造方法就完成了,一共做了两件事：</p><ul><li>指定装载因子为默认装载因子(0.75)</li><li>初始化阈值 = 大于或等于指定容量的最小的2的整数次方(或者MAXIMUM_CAPACITY)或1)</li></ul><p>无论无参构造方法还是指定初始容量，可以看出来，<strong>只是初始化了阈值threshold及装载因子loadFactor，并没有初始化底层节点数组 Node&lt;K,V&gt;[] table</strong>。</p><h2 id="4-HashMap的put"><a href="#4-HashMap的put" class="headerlink" title="4 HashMap的put"></a>4 HashMap的put</h2><p>前面看到了HashMap底层采用<strong>数组+单向链表+红黑树(还没讨论)</strong>，而创建一个HashMap对象时，也只会初始化其装载因子和阈值，下面看一下当使用HashMap的put(K,V)方法时经历了哪些过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-hash算法扰动函数"><a href="#4-1-hash算法扰动函数" class="headerlink" title="4.1 hash算法扰动函数"></a>4.1 hash算法扰动函数</h3><p>调用put(K,V)方法时，内部调用了put(int hash, K key, V value,  boolean onlyIfAbsent, boolean evict)，然而调用这个方法之前可以看出第一个参数也调用了内部方法计算hash值:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// 使用hashCode的值和hashCode的值无符号右移16位做异或操作</span></span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们知道，对象的hashCode值是根据我们自定义的hashcode()方法生成的32位整型数字，而从上面的方法可以看出来，HashMap中Node中的hash值 =  (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)，即利用了key的hashcode的低16位与高16位做异或运算，那么为什么需要这么做呢？</p><p>我们知道，HashMap存放数据的时候需要利用key的hash值与（哈希桶容量-1）做与(&amp;)运算，进而算出数据需要储存在哈希桶的什么位置。(后面会提到，先看其中一点源码)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>而哈希桶容量刚开始是比较小的，随着其动态扩容也不可能达到hash值的最大值，虽然其理论最大容量为2的30次方，但限于内存的原因远远达不到这个值。因此若直接用HashMap的capacity与key的hashCode值做与运算那么实际利用的只是较低的几位(由capacity限制的)。这样一来，虽然不同的key值的hasCode值相同的几率很小，但求与运算之后的结果相同的概率会比想象中要大，发生hash碰撞的几率也会变大。因此，要想办法将key的hashCode值的高位影响向底位扩展，因此就用到了这个方法，下面看一下实际的效果：</p><p><img src="/images/collection/hash异或.png" alt></p><p>这个方法也即是扰动函数，目的就是为了使得真正利用的hash值更加不确定来降低hash碰撞的几率。</p><h3 id="4-2-核心逻辑"><a href="#4-2-核心逻辑" class="headerlink" title="4.2 核心逻辑"></a>4.2 核心逻辑</h3><p>下面就进入到了真正的put方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//tab存放当前的哈希桶，p用作临时链表节点</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//如果当前哈希表是空的，执行初始化操作</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//初始化哈希表(resize()方法综合了初始化和扩容)</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//如果当前index的节点是空的，表示没有发生哈希碰撞。直接构建一个新节点Node，挂载在index处即可</span></span><br><span class="line">    <span class="comment">//这里利用的是哈希值 &amp; 哈希桶的长度-1，替代模运算</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//否则 发生了哈希冲突。</span></span><br><span class="line">            <span class="comment">//e临时节点</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">//如果哈希值相等，key也相等，将现有节点引用赋给临时节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">///将当前节点引用赋值给e</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//当现有节点是红黑树节点时</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当哈希冲突的节点是链表节点，但与链表头部节点不相等，那么需要遍历链表决定是覆盖还是添加</span></span><br><span class="line">                <span class="comment">//遍历链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;<span class="comment">//遍历到尾部，追加新节点到尾部</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//如果追加节点后，链表数量》=8，则转化为红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果找到了要覆盖的节点</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//遍历节点后移</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果e不是null，说明有需要覆盖的节点</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//覆盖节点值，并返回原oldValue</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//如果执行到了这里，说明插入了一个新的节点，所以会修改modCount,并返回null</span></span><br><span class="line">    <span class="comment">//修改modCount，即修改次数加1</span></span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//更新size，并判断是否需要扩容(size&gt;阈值)</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">    <span class="comment">//这是一个空实现的函数，用作LinkedHashMap重写使用</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里可以看得出来，当往HashMap里增添元素时，底层会根据传入的key值决定是插入新节点还是修改老节点，并且也涉及到了之前提到的<strong>数组+单向链表+红黑树</strong>，对每种情况都做了对应的处理。其中，当哈希表是空的以及需要扩容时都调用到了扩容方法：resize()。这是一个很重要的方法，下面看一下它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//oldTab 为当前表的哈希桶</span></span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//当前哈希桶的容量 length</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//当前的阈值</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="comment">//初始化新的容量和阈值为0</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;<span class="comment">//当前哈希桶的容量大于0，说明是扩容不是初始化</span></span><br><span class="line">            <span class="comment">//如果当前容量已经到达上限</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="comment">//则设置阈值是2的31次方-1</span></span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="comment">//同时返回当前的哈希桶，不再扩容</span></span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;<span class="comment">//否则新的容量为旧的容量的两倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<span class="comment">//如果旧的容量大于等于默认初始容量16</span></span><br><span class="line">                <span class="comment">//那么新的阈值也等于旧的阈值的两倍</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;<span class="comment">//如果当前表是空的，但是有阈值。代表是初始化时指定了容量、阈值的情况,此时是初始化哈希桶</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">//那么新表的容量就等于旧的阈值</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">//如果当前表是空的，而且也没有阈值。代表是初始化时没有任何容量/阈值参数的情况</span></span><br><span class="line">            <span class="comment">//此时新表的容量为默认的容量 16</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            <span class="comment">//新的阈值为默认容量16 * 默认加载因子0.75f = 12</span></span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//如果新的阈值是0，对应的是  当前表是空的，但是有阈值的情况</span></span><br><span class="line">            <span class="comment">//根据新表容量 和 加载因子 求出新的阈值</span></span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            <span class="comment">//进行越界修复</span></span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//更新阈值 </span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">//根据新的容量 构建新的哈希桶</span></span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">//更新哈希桶引用</span></span><br><span class="line">        table = newTab;</span><br><span class="line">    <span class="comment">//如果以前的哈希桶中有元素</span></span><br><span class="line">        <span class="comment">//下面开始将当前哈希桶中的所有节点转移到新的哈希桶中</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//遍历老的哈希桶</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                <span class="comment">//临时节点e</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;<span class="comment">//如果当前桶中有元素,则将链表赋值给e</span></span><br><span class="line">                    <span class="comment">//将原哈希桶置空以便GC</span></span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//如果当前链表中就一个元素</span></span><br><span class="line">                        <span class="comment">//直接将这个元素放置在新的哈希桶里。</span></span><br><span class="line">                        <span class="comment">//注意这里取下标是用 哈希值 与 桶的长度-1</span></span><br><span class="line">                        <span class="comment">//由于桶的长度是2的n次方，这么做其实是等于一个模运算。但是效率更高</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">//如果发生过哈希碰撞 ,而且是节点数超过8个，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order //如果当前链表不止一个元素</span></span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        因为扩容是容量翻倍，所以原链表上的每个节点,现在可能存放在原来的下标</span></span><br><span class="line"><span class="comment">                        即low位，或者扩容后的下标，即high位。high位 = low位+原哈希桶容量</span></span><br><span class="line"><span class="comment">                        低位链表的头结点、尾节点</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="comment">//高位链表的头节点、尾节点</span></span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;<span class="comment">//临时节点 存放e的下一个节点</span></span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            因为老哈希桶容量与hash与运算取决于哈希桶容量(较小)，所以扩容后需要重新计   算数据存放的位置</span></span><br><span class="line"><span class="comment">                            利用哈希值与旧的容量，可以得到哈希值取模后是大于等于oldCap还是</span></span><br><span class="line"><span class="comment">                            小于oldCap，等于0代表小于oldCap，应该存放在低位，否则存放在高位</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;<span class="comment">//给头尾节点引用赋值</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;<span class="comment">//高位也是相同的逻辑</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);<span class="comment">//循环直到链表结束</span></span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;<span class="comment">//将低位链表存放在原index处</span></span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;<span class="comment">//将高位链表存放在新index处</span></span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回新的哈希桶(已按完成初始化或者扩容数据迁移)</span></span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面一张图展示了HashMap的put(K key, V value)的核心逻辑，图片参考网络(自己总结后修改重新作图):</p><p><img src="/images/watermark/collection/HashMap-put.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
